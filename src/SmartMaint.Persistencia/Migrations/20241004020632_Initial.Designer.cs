// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SmartMaint.Persistencia.Contexto;

#nullable disable

namespace SmartMaint.Persistencia.Migrations
{
    [DbContext(typeof(EscritaDbContexto))]
    [Migration("20241004020632_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SmartMaint.Dominio.Entidades.Empresa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Emp_Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativa")
                        .HasColumnType("boolean")
                        .HasColumnName("Emp_Ativa");

                    b.Property<string>("Celular")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Emp_Celular");

                    b.Property<string>("Cnpj")
                        .HasColumnType("varchar(14)")
                        .HasColumnName("Emp_Cnpj");

                    b.Property<string>("ComplementoEndereco")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Emp_ComplementoEndereco");

                    b.Property<string>("Cpf")
                        .HasColumnType("varchar(11)")
                        .HasColumnName("Emp_Cpf");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Emp_DataAtualizacao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Emp_DataCadastro");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Emp_Email");

                    b.Property<long>("EnderecoId")
                        .HasColumnType("bigint")
                        .HasColumnName("Emp_Endereco_Id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Emp_Nome");

                    b.Property<string>("NumeroEndereco")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Emp_NumeroEndereco");

                    b.Property<string>("Telefone")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Emp_Telefone");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Empresa", (string)null);
                });

            modelBuilder.Entity("SmartMaint.Dominio.Entidades.Endereco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("End_Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("End_Bairro");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("End_Cep");

                    b.Property<string>("Localidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("End_Localidade");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("End_Logradouro");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnType("varchar(2)")
                        .HasColumnName("End_Uf");

                    b.HasKey("Id");

                    b.ToTable("Endereco", (string)null);
                });

            modelBuilder.Entity("SmartMaint.Dominio.Entidades.Perfil", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Perf_Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Perf_Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Usr_DataAtualizacao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Usr_DataCadastro");

                    b.Property<long>("EmpresaId")
                        .HasColumnType("bigint")
                        .HasColumnName("Perf_Empresa_Id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Perf_Nome");

                    b.Property<int[]>("TipoAcoesPerfil")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("Perf_Acoes");

                    b.Property<int>("TipoPerfil")
                        .HasColumnType("integer")
                        .HasColumnName("Perf_TipoPerfil");

                    b.HasKey("Id");

                    b.HasIndex("EmpresaId");

                    b.ToTable("Perfil", (string)null);
                });

            modelBuilder.Entity("SmartMaint.Dominio.Entidades.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Usr_Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean")
                        .HasColumnName("Usr_Ativo");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Usr_DataAtualizacao");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Usr_DataCadastro");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Usr_Email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Usr_Nome");

                    b.Property<long>("PerfilId")
                        .HasColumnType("bigint")
                        .HasColumnName("Usr_Perfil_Id");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("varchar(32)")
                        .HasColumnName("Usr_Senha");

                    b.HasKey("Id");

                    b.HasIndex("PerfilId");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Usuario_Empresa", b =>
                {
                    b.Property<long>("Empresa_Id")
                        .HasColumnType("bigint");

                    b.Property<long>("Usuario_Id")
                        .HasColumnType("bigint");

                    b.HasKey("Empresa_Id", "Usuario_Id");

                    b.HasIndex("Usuario_Id");

                    b.ToTable("Usuario_Empresa");
                });

            modelBuilder.Entity("SmartMaint.Dominio.Entidades.Empresa", b =>
                {
                    b.HasOne("SmartMaint.Dominio.Entidades.Endereco", "Endereco")
                        .WithMany("Empresas")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("SmartMaint.Dominio.Entidades.Perfil", b =>
                {
                    b.HasOne("SmartMaint.Dominio.Entidades.Empresa", "Empresa")
                        .WithMany("Perfis")
                        .HasForeignKey("EmpresaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empresa");
                });

            modelBuilder.Entity("SmartMaint.Dominio.Entidades.Usuario", b =>
                {
                    b.HasOne("SmartMaint.Dominio.Entidades.Perfil", "Perfil")
                        .WithMany("Usuarios")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("Usuario_Empresa", b =>
                {
                    b.HasOne("SmartMaint.Dominio.Entidades.Empresa", null)
                        .WithMany()
                        .HasForeignKey("Empresa_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartMaint.Dominio.Entidades.Usuario", null)
                        .WithMany()
                        .HasForeignKey("Usuario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartMaint.Dominio.Entidades.Empresa", b =>
                {
                    b.Navigation("Perfis");
                });

            modelBuilder.Entity("SmartMaint.Dominio.Entidades.Endereco", b =>
                {
                    b.Navigation("Empresas");
                });

            modelBuilder.Entity("SmartMaint.Dominio.Entidades.Perfil", b =>
                {
                    b.Navigation("Usuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
